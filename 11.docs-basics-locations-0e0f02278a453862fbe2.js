webpackJsonp([11],{124:function(n,a,s){n.exports=s(1).markdownPostProcessor('<p><strong>Note: The Guide is still only an outline. <a href="%%%SITEPACK_LINK%%%/docs/basics/github.com/jamesknelson/junctions%%%END_SITEPACK_LINK%%%">Pull Requests</a> would be greatly appreciated!</strong></p>\n<ul>\n<li>\n<p>One of the things that makes the web <em>the web</em> is that everything has a URL.</p>\n</li>\n<li>\n<p>In fact, everything that is displayed in a browser has a URL, which is displayed in the address bar.</p>\n</li>\n<li>\n<p>But applications can’t see the address bar, so how do they know the current URL?</p>\n</li>\n<li>\n<p>There is a JavaScript object containing this information that every application automatically has access to. It is old as JavaScript itself.</p>\n</li>\n<li>\n<p>This object is <code>window.location</code>, and it looks something like this:</p>\n</li>\n</ul>\n<pre><code class="language-js"><span class="token punctuation" >{</span>\n    pathname<span class="token punctuation" >:</span> <span class="token string" >\'/some/path\'</span><span class="token punctuation" >,</span>\n    search<span class="token punctuation" >:</span> <span class="token string" >\'?page=1&amp;pageSize=20\'</span><span class="token punctuation" >,</span>\n    hash<span class="token punctuation" >:</span> <span class="token string" >\'#top\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<ul>\n<li>\n<p>Within <em>junctions.js</em>, this object would be called a <code>Location</code> object.</p>\n</li>\n<li>\n<p>It represents a single <em>location</em> within your application.</p>\n</li>\n<li>\n<p>While a URL is certainly one way to represent a location, not all locations be represented with a single URL.</p>\n</li>\n<li>\n<p>For example, some applications contain modals. Modals <em>feel</em> like locations – it makes sense that after opening a modal, clicking the <em>Back</em> button should close it.</p>\n</li>\n<li>\n<p>But not every modal needs its own URL.</p>\n</li>\n<li>\n<p>How do we solve this?</p>\n</li>\n<li>\n<p>Modern browsers also have the concept of location <code>state</code>.</p>\n</li>\n<li>\n<p>This is an arbitrary object that can be associated with any item within your browser history, by using the browser’s <code>window.history.pushState()</code> method.</p>\n</li>\n<li>\n<p>The application’s current location <code>state</code> can be viewed at <code>window.history.state</code>.</p>\n</li>\n<li>\n<p>But to make things easier for you, Junctions assumes that your current <code>state</code> will be stored as part of a <code>Location</code> object.</p>\n</li>\n<li>\n<p>With this in mind, a <code>Location</code> object can look like this:</p>\n</li>\n</ul>\n<pre><code class="language-js"><span class="token punctuation" >{</span>\n    pathname<span class="token punctuation" >:</span> <span class="token string" >\'/some/path\'</span><span class="token punctuation" >,</span>\n    search<span class="token punctuation" >:</span> <span class="token string" >\'?page=1&amp;pageSize=20\'</span><span class="token punctuation" >,</span>\n    hash<span class="token punctuation" >:</span> <span class="token string" >\'#top\'</span><span class="token punctuation" >,</span>\n    state<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        showAddModal<span class="token punctuation" >:</span> <span class="token boolean" >true</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<ul>\n<li>\n<p>In fact, the format of this <code>Location</code> object is not unique to <em>junctions.js</em>. It is also used by the popular <a href="https://github.com/mjackson/history">history</a> package.</p>\n</li>\n<li>\n<p>For small applications, these <code>Location</code> objects provide all the information we need to handle routing.</p>\n</li>\n<li>\n<p>But as your app grows, feeding pieces of data from the current <code>Location</code> into associated components will become a hassle.</p>\n</li>\n<li>\n<p>The problem is that <code>Location</code> objects are <em>flat</em>, while a component-based application will be nested.</p>\n</li>\n<li>\n<p>To fix this problem, <em>junctions.js</em> gives you a more suitable way to represent location information, called <a href="%%%SITEPACK_LINK%%%/docs/basics/routes.md%%%END_SITEPACK_LINK%%%">Routes</a>.</p>\n</li>\n</ul>\n')}});