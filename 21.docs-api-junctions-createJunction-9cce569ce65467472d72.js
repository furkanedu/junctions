webpackJsonp([21],{114:function(n,a,s){n.exports=s(1).markdownPostProcessor('<p>Creates a <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Junction.md%%%END_SITEPACK_LINK%%%">Junction</a> object to specify the possible types of <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a> which a component can handle. For more details on Junctions, see the <a href="%%%SITEPACK_LINK%%%/docs/introduction/what-you-get-from-junctions.md%%%END_SITEPACK_LINK%%%">What You Get From Junctions</a> or <a href="%%%SITEPACK_LINK%%%/docs/basics/junctions.md%%%END_SITEPACK_LINK%%%">Junctions</a> articles in the Guide.</p>\n<h4 id="arguments"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h4>\n<p>Accepts an object of <em>branches</em>, which define the types of <code>Route</code> which a component can render. The object keys are used to uniquely identify each route type.</p>\n<pre><code class="language-js"><span class="token punctuation" >{</span>\n  <span class="token punctuation" >[</span>key<span class="token punctuation" >]</span><span class="token punctuation" >:</span> Branch<span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<h5 id="branch"><a class="header-anchor" href="#branch" aria-hidden="true">#</a> Branch</h5>\n<p>Each <code>Branch</code> object contains configuration for one type of <code>Route</code>. It can include any of the following properties:</p>\n<ul>\n<li>\n<p><code>data</code> (<em>object</em>)</p>\n<p>Stores application-specific data, such as a Component used to render routes of this type.</p>\n</li>\n<li>\n<p><code>default</code> (<em>boolean</em>)</p>\n<p>If true, the Junction will default to this branch if no route is known. If a Junction does not specify a default, its state will default to <code>null</code>.</p>\n</li>\n<li>\n<p><code>next</code> (<em><a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Junction.md%%%END_SITEPACK_LINK%%%">Junction</a> | { [key]: <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Junction.md%%%END_SITEPACK_LINK%%%">Junction</a> }</em>)</p>\n<p>Specifies the subsequent types of routes which a route of this type can take. Like <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/createConverter.md%%%END_SITEPACK_LINK%%%">createConverter</a>, specifying an object of Junctions will allow for one <code>Route</code> from each <code>Junction</code> to be active simultaneously.</p>\n</li>\n<li>\n<p><code>paramTypes</code> (<em>{ [key]: Param }</em>)</p>\n<p>Configures the parameters for routes of this type.</p>\n</li>\n<li>\n<p><code>path</code> (<em>string</em>)</p>\n<p>Specifies how routes of this type should be represented in URLs. If not specified, a default will be generated based on the branch’s key and required param types.</p>\n</li>\n</ul>\n<h5 id="param"><a class="header-anchor" href="#param" aria-hidden="true">#</a> Param</h5>\n<p>Each parameter requires a configuration object. It can be blank, or it can have any combination of the following properties:</p>\n<ul>\n<li>\n<p><code>required</code> (<em>boolean</em>)</p>\n<p>If true, routes of this type cannot be created without this parameter.</p>\n</li>\n<li>\n<p><code>default</code> (<em>value | function</em>)</p>\n<p>If specified, routes which are not supplied with this parameter will be given a default value. If not specified, the parameter will default to <code>undefined</code>.</p>\n</li>\n<li>\n<p><code>serializer</code> (<em>{ serialize, deserialize }</em>)</p>\n<p>Define how this parameter’s values should be converted to and from strings such as URL components.</p>\n</li>\n</ul>\n<h4 id="example"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4>\n<pre><code class="language-js"><span class="token keyword" >const</span> appJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Home<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span><span class="token punctuation" >,</span>\n    path<span class="token punctuation" >:</span> <span class="token string" >\'/dashboard\'</span><span class="token punctuation" >,</span>\n    data<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      Component<span class="token punctuation" >:</span> DashboardScreen<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n\n  Contacts<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    paramTypes<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      page<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token number" >1</span><span class="token punctuation" >,</span>\n        serializer<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n          serialize<span class="token punctuation" >:</span> <span class="token punctuation" >(</span>x<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> x <span class="token operator" >?</span> <span class="token function" >String</span><span class="token punctuation" >(</span>x<span class="token punctuation" >)</span> <span class="token punctuation" >:</span> <span class="token string" >\'\'</span><span class="token punctuation" >,</span>\n          deserialize<span class="token punctuation" >:</span> <span class="token punctuation" >(</span>x<span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> x <span class="token operator" >===</span> <span class="token string" >\'\'</span> <span class="token operator" >?</span> <span class="token keyword" >null</span> <span class="token punctuation" >:</span> window<span class="token punctuation" >.</span><span class="token function" >parseInt</span><span class="token punctuation" >(</span>x<span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span>\n      <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    children<span class="token punctuation" >:</span> ContactsScreen<span class="token punctuation" >.</span>junctions<span class="token punctuation" >,</span>\n    data<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      Component<span class="token punctuation" >:</span> ContactsScreen<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n</code></pre>\n')}});