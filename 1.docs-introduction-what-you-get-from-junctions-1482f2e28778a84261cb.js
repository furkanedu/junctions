webpackJsonp([1],{59:function(n,t,e){n.exports=e.p+"b8f87f8fdb4c0295e0cfd931310d74ba.png"},60:function(n,t,e){n.exports=e.p+"63d8539be1b481ea13cd9ca3831fb00f.png"},130:function(n,t,e){n.exports=e(1).markdownPostProcessor('<p>So far, we’ve covered what you get from Junctions in a rather general sense:</p>\n<ul>\n<li>You get the ability to compose components that have routes</li>\n<li>You get integration with HTML5 History</li>\n<li>You get flexibility to use React however you’d like</li>\n</ul>\n<p>But what is it about Junctions that makes all of this possible? To answer this, we’re going to need to dive into the specifics. So let’s change the question a little:</p>\n<p><em>What tools in particular will make your life easier?</em></p>\n<p>This is easier to answer.</p>\n<ol>\n<li>A <code>Route</code> structure that represents routing information</li>\n<li>A <code>Converter</code> that converts URLs into <code>Route</code> objects</li>\n<li>A <code>Junction</code> structure that allows you to configure your <code>Converter</code></li>\n</ol>\n<p>It turns out that these three tools are all you’ll need to write a Junctions app, so let’s go through them in a little more detail!</p>\n<h2 id="routes-aint-locations"><a class="header-anchor" href="#routes-aint-locations" aria-hidden="true">#</a> Routes Ain’t Locations</h2>\n<p>The best way to understand a <code>Route</code> object is to compare it to the <code>Location</code> objects that we first encountered in <a href="%%%SITEPACK_LINK%%%/docs/introduction/do-i-need-a-router.md%%%END_SITEPACK_LINK%%%">Do I Need A Router?</a>. Recall that <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Location.md%%%END_SITEPACK_LINK%%%">Location</a> objects each hold a single URL and some arbitrary state:</p>\n<pre><code class="language-js"><span class="token punctuation" >{</span>\n  pathname<span class="token punctuation" >:</span> <span class="token string" >\'/invoices/12345/payments\'</span><span class="token punctuation" >,</span>\n  search<span class="token punctuation" >:</span> <span class="token string" >\'?page=2\'</span><span class="token punctuation" >,</span>\n  state<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    arbitrary<span class="token punctuation" >:</span> <span class="token string" >\'stuff\'</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<p>The problem that we encountered with <code>Location</code> objects is that their structure doesn’t fit with React component trees. Splitting up the <code>pathname</code> and getting the information to the correct component is cumbersome.</p>\n<p><img src="'+e(59)+'" alt="Flat and nested">\n<em>It is not immediately obvious how to pass a flat Location into a nested tree.</em></p>\n<p>And even if you’re fine with splitting up this information manually, you’ll still face the problem of composability. As the <a href="%%%SITEPACK_LINK%%%/docs/introduction/three-principles.md%%%END_SITEPACK_LINK%%%">Haiku of Routing Principles</a> states, <em>Components Compose</em> – but URLs don’t.</p>\n<p>This is where Routes come in. Routes, like Locations, are a way of representing navigation state. But unlike Locations, <code>Route</code> objects are composable, and structured to match your component tree <em>perfectly</em>.</p>\n<p><img src="'+e(60)+'" alt="Routes and Components">\n<em>Nested route data flows naturally through a component tree.</em></p>\n<p>Each <code>Route</code> object has:</p>\n<ul>\n<li>a <code>key</code> specifying the type of route that it represents</li>\n<li>some <code>params</code> that have been extracted from the URL’s path or query string</li>\n<li>one or many <code>next</code> routes, allowing routes to be composed just like components</li>\n</ul>\n<p>For example, the Route in the diagram above would look something like this:</p>\n<pre><code class="language-js"><span class="token punctuation" >{</span>\n    key<span class="token punctuation" >:</span> <span class="token string" >\'InvoiceList\'</span><span class="token punctuation" >,</span>\n    next<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        key<span class="token punctuation" >:</span> <span class="token string" >\'Invoice\'</span><span class="token punctuation" >,</span>\n        params<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> id<span class="token punctuation" >:</span> <span class="token number" >12345</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        next<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n            key<span class="token punctuation" >:</span> <span class="token string" >\'Details\'</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<p>But how do you get hold of a <code>Route</code> object? The browser API only understands absolute <code>Location</code> objects, so we’re going to need some way of converting between <code>Location</code> and <code>Route</code>. And that’s what the <code>Converter</code> is for.</p>\n<h2 id="converters-convert"><a class="header-anchor" href="#converters-convert" aria-hidden="true">#</a> Converters Convert</h2>\n<p>Converters convert between <code>Route</code> and <code>Location</code> objects, just as you might expect. But a <code>Location</code> object by itself doesn’t have enough information to generate a <code>Route</code> object – <em>so how does the Converter actually work?</em></p>\n<p>To demonstrate, let’s consider the URL <code>/invoices/add</code>. To create a <code>Route</code>, the Converter will need to choose between a number of possibilities:</p>\n<ul>\n<li>\n<p>Does <code>add</code> represent a page with a form for adding new invoices, or an Invoice with the ID <code>&quot;add&quot;</code>?</p>\n<pre><code class="language-js"><span class="token keyword" >const</span> option1 <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    key<span class="token punctuation" >:</span> <span class="token string" >\'AddInvoice\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >const</span> option2 <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    key<span class="token punctuation" >:</span> <span class="token string" >\'Invoice\'</span><span class="token punctuation" >,</span>\n    params<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> id<span class="token punctuation" >:</span> <span class="token string" >\'add\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n</li>\n<li>\n<p>Should this URL be represented as a single Route, or as two nested routes?</p>\n<pre><code class="language-js"><span class="token keyword" >const</span> option1 <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    key<span class="token punctuation" >:</span> <span class="token string" >\'AddInvoice\'</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n\n<span class="token keyword" >const</span> option2 <span class="token operator" >=</span> <span class="token punctuation" >{</span>\n    key<span class="token punctuation" >:</span> <span class="token string" >\'Invoices\'</span><span class="token punctuation" >,</span>\n    next<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        key<span class="token punctuation" >:</span> <span class="token string" >\'Add\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n</li>\n</ul>\n<p>As you can see, there is a problem: <em>The Converter doesn’t know how to answer these questions.</em></p>\n<p>We’re going to have to <em>tell</em> it the answers. And that is what <code>Junction</code> objects are for!</p>\n<h2 id="junctions-list-possibilities"><a class="header-anchor" href="#junctions-list-possibilities" aria-hidden="true">#</a> Junctions List Possibilities</h2>\n<p>A <code>Junction</code> is an object which defines the <em>possibilities</em> that a <code>Converter</code> needs to consider.</p>\n<p>The best way to understand this is to see it in action. So let’s create a <code>Junction</code> which can answer the questions from the previous section:</p>\n<pre><code class="language-js"><span class="token keyword" >const</span> junction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    Dashboard<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        path<span class="token punctuation" >:</span> <span class="token string" >\'/dashboard\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    InvoiceList<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        path<span class="token punctuation" >:</span> <span class="token string" >\'/invoices\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n</code></pre>\n<p>If we pass this <code>Junction</code> to a <code>Converter</code>, <strong>we’re indicating that the <code>Converter</code> only needs to consider two possible URLs</strong>. Anything else is unexpected, and the <code>Converter</code> is perfectly within its rights to bail by returning <code>undefined</code> – i.e. 404.</p>\n<p>So now that we have a <code>Junction</code>, let’s answer the questions from the previous section:</p>\n<blockquote>\n<p><strong>Q</strong>: Does <code>add</code> represent a page with a form for adding new invoices, or an Invoice with the ID <code>&quot;add&quot;</code>?<br>\n<em><strong>A</strong>: It represents neither!</em></p>\n</blockquote>\n<blockquote>\n<p><strong>Q</strong>: Should this URL be represented as a single Route, or as two nested routes?<br>\n<em><strong>A</strong>: It is <code>undefined</code>!</em></p>\n</blockquote>\n<p>We probably don’t actually want the <code>Converter</code> to return <code>undefined</code>, so let’s fix the <code>Junction</code>. But how?</p>\n<p>Junction objects, like <code>Route</code> objects, can be nested using the <code>next</code> property. And importantly, the possible paths they specify are <em>relative</em> – not absolute.</p>\n<pre><code class="language-js"><span class="token keyword" >const</span> junction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    Dashboard<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        path<span class="token punctuation" >:</span> <span class="token string" >\'/dashboard\'</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    InvoiceList<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n        path<span class="token punctuation" >:</span> <span class="token string" >\'/invoices\'</span><span class="token punctuation" >,</span>\n        next<span class="token punctuation" >:</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n            Invoice<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n                path<span class="token punctuation" >:</span> <span class="token string" >\'/:id\'</span><span class="token punctuation" >,</span>\n                paramTypes<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n                    id<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> required<span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n                <span class="token punctuation" >}</span>\n            <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n        <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n</code></pre>\n<p>By specifying a <code>next</code> junction, you’re telling the <code>Converter</code>:</p>\n<p><em>If you find a URL which begins with this <code>path</code>, the <strong>next</strong> part of the path should match the <strong>next</strong> Junction</em>.</p>\n<p>You can even think of this as a kind of equation:</p>\n<p><img src="'+e(328)+'" alt="Decision Tree"></p>\n<p>If the URL starts with one of your branches, you get a <code>Route</code>, the next <code>Junction</code>, and the remainder of the URL. Repeat the process until you either have no remainder URL, no next <code>Junction</code>, or no matching branch. That’s all the <code>Converter</code> does! <em>It’s Math, not Magic.</em></p>\n<p>Speaking of math, when you draw all of your junctions as a tree, you get a pretty thing like this:</p>\n<p><img src="'+e(327)+'" alt="Decision Tree">\n<em>Junctions can be represented as a Decision Tree</em></p>\n<p>The great thing about this <em>Junction Diagram</em> is that you can see at a glance what Route any given URL will take. You could even draw it:</p>\n<p><img src="'+e(326)+'" alt="Decision Tree">\n<em>Routes can be represented as a subset of a Decision Tree.</em></p>\n<p>And with that, you know that Junctions are exactly what the <code>Converter</code> needs to find a <code>Route</code>. After all – they’re exactly what you need, too!</p>\n')},326:function(n,t,e){n.exports=e.p+"bd55958691efe2c63307fd7b7d5a3644.png"},327:function(n,t,e){n.exports=e.p+"8ba7f97c02ca2df6a15fbd88f7e2e325.png"},328:function(n,t,e){n.exports=e.p+"bfbc35eea5e663cfe6dd5726eb76a791.png"}});