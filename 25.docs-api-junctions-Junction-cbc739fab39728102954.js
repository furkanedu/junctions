webpackJsonp([25],{110:function(n,a,s){n.exports=s(1).markdownPostProcessor('<p>Junctions are objects which represents a number of possible <em>choices</em> – for example, the choices on a tab bar, a navigation menu, or the choice between whether a modal is displayed or not.</p>\n<p>Within a <code>Junction</code> object, each <em>possibility</em> is represented by a <em>Branch</em> object. And within your application, a single <em>state</em> of a <code>Junction</code> is represent by a <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a> object.</p>\n<p>To create a <code>Junction</code>, use the <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/createJunction.md%%%END_SITEPACK_LINK%%%">createJunction</a> function. Once you have a Junction, use its <a href="#createroutekey-params-next">createRoute()</a> method to create <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a> objects which represent states of that Junction.</p>\n<p>To learn more about what Junctions are and how they’re used, read <a href="%%%SITEPACK_LINK%%%/docs/introduction/what-you-get-from-junctions.md%%%END_SITEPACK_LINK%%%">What You Get From Junctions</a> and <a href="%%%SITEPACK_LINK%%%/docs/basics/junctions.md%%%END_SITEPACK_LINK%%%">Junctions</a> in the Junctions Guide.</p>\n<h3 id="component-junctions"><a class="header-anchor" href="#component-junctions" aria-hidden="true">#</a> Component Junctions</h3>\n<p>By adding a Junction to a Component, you’re indicating that the Component expects to receive a single <code>route</code> prop, whose value must be a <code>Route</code> object following one of the formats defined by the Junctions’s branches.</p>\n<pre><code class="language-js"><span class="token comment" spellcheck="true">// Create a Junction which can hold one of three Route Types</span>\n<span class="token keyword" >const</span> junction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Dashboard<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Invoices<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Help<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >class</span> <span class="token class-name" >ApplicationScreen</span> <span class="token keyword" >extends</span> <span class="token class-name" >React<span class="token punctuation" >.</span>Component</span> <span class="token punctuation" >{</span>\n  <span class="token comment" spellcheck="true">// By adding `junction`, you\'re specifying that this component should</span>\n  <span class="token comment" spellcheck="true">// receive a `Route` object on its `route` property with one of the</span>\n  <span class="token comment" spellcheck="true">// keys defined above.</span>\n  <span class="token keyword" >static</span> junction <span class="token operator" >=</span> junction\n\n  <span class="token comment" spellcheck="true">// ...</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<p><em>See a similar in use at the <a href="%%%SITEPACK_LINK%%%/examples/Raw.example.js%%%END_SITEPACK_LINK%%%">Raw</a> live example!</em></p>\n<h3 id="composing-junctions"><a class="header-anchor" href="#composing-junctions" aria-hidden="true">#</a> Composing Junctions</h3>\n<p>The main purpose of a Junction is to represent the possible navigation states of a single Component. But what if that Component is composed of <em>other</em> components, each of which has its own navigation states?</p>\n<p>As an example, imagine that the Component in the above example renders a <code>&lt;HelpScreen&gt;</code> component when the <code>Help</code> branch is selected. But then say that this <code>&lt;HelpScreen&gt;</code> component itself can take one of two possible states\nIn order to represent the possible navigation states within a single component.</p>\n<pre><code class="language-js"><span class="token keyword" >class</span> <span class="token class-name" >HelpScreen</span> <span class="token keyword" >extends</span> <span class="token class-name" >React<span class="token punctuation" >.</span>Component</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >static</span> junction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n    DashboardHelp<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    InvoicesHelp<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<p>Because the <code>&lt;ApplicationScreen&gt;</code> component composes the <code>&lt;HelpScreen&gt;</code>, the possible states of <code>&lt;HelpScreen&gt;</code> are <em>also</em> possible states of <code>&lt;ApplicationScreen&gt;</code> – but <em>only</em> when <code>&lt;ApplicationState&gt;</code> is rendering a <code>Help</code> route.</p>\n<p>In order to represent this, each Branch within a <code>Junction</code> can also define its own <code>next</code> junction – representing the next choice which needs to be made if that branch is selected.</p>\n<pre><code class="language-js"><span class="token keyword" >const</span> junction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Dashboard<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Invoices<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Help<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    <span class="token comment" spellcheck="true">// Indicates that if this branch is selected, a selection from</span>\n    <span class="token comment" spellcheck="true">// the help screen\'s junction will also need to be made</span>\n    next<span class="token punctuation" >:</span> HelpScreen<span class="token punctuation" >.</span>junction<span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n</code></pre>\n<p>The end result of this is that each <code>Junction</code> is effectively a <a href="https://en.wikipedia.org/wiki/Decision_tree">Decision tree</a>. The branches at each node represent the possible things that one single component can render.</p>\n<h3 id="parallel-junctions"><a class="header-anchor" href="#parallel-junctions" aria-hidden="true">#</a> Parallel Junctions</h3>\n<p>A single <code>Junction</code> only allows you to represent a single choice. But what if your component needs to be able to represent <em>multiple</em> choices – for example, the choice between which tab to render, and the choice between which modal to render?</p>\n<p>In order to facilitate this, each Branch can be assigned <em>multiple</em> <code>next</code> junctions. To do so, instead of passing a single <code>Junction</code> object to <code>next</code>, pass an object containing <code>Junction</code> objects. This will cause the <code>next</code> property of associated <code>Route</code> objects to use an object with the same shape.</p>\n<p><em>Note: When providing an object of parallel junctions, only the state of the junction with the key <code>main</code> will be added to the path of <code>Location</code> objects. The state of any other junctions will be added to the Location <code>state</code>.</em></p>\n<pre><code class="language-js"><span class="token keyword" >const</span> invoiceMainJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Details<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Payments<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> invoiceModalJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  AddPayment<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> invoicesJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  List<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Invoice<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    paramTypes<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      id<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> required<span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    next<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      main<span class="token punctuation" >:</span> invoiceMainJunction<span class="token punctuation" >,</span>\n      modal<span class="token punctuation" >:</span> invoiceModalJunction<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >class</span> <span class="token class-name" >InvoicesScreen</span> <span class="token keyword" >extends</span> <span class="token class-name" >React<span class="token punctuation" >.</span>Component</span> <span class="token punctuation" >{</span>\n  <span class="token keyword" >static</span> junction <span class="token operator" >=</span> invoicesJunction\n\n  <span class="token function" >render</span><span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n    <span class="token keyword" >const</span> route <span class="token operator" >=</span> <span class="token keyword" >this</span><span class="token punctuation" >.</span>props<span class="token punctuation" >.</span>route\n\n    <span class="token keyword" >if</span> <span class="token punctuation" >(</span>route<span class="token punctuation" >.</span>key <span class="token operator" >==</span> <span class="token string" >\'Invoice\'</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>\n      <span class="token comment" spellcheck="true">// When rendering an `Invoice` route, it will have *two* next routes.</span>\n      console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span>route<span class="token punctuation" >.</span>next<span class="token punctuation" >.</span>main<span class="token punctuation" >.</span>key<span class="token punctuation" >)</span>\n      console<span class="token punctuation" >.</span><span class="token function" >log</span><span class="token punctuation" >(</span>route<span class="token punctuation" >.</span>next<span class="token punctuation" >.</span>modal<span class="token punctuation" >.</span>key<span class="token punctuation" >)</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span>\n<span class="token punctuation" >}</span>\n</code></pre>\n<h2 id="methods"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2>\n<h3 id="createroutekey-params-next"><a class="header-anchor" href="#createroutekey-params-next" aria-hidden="true">#</a> createRoute(key, params, …next)</h3>\n<p>Create a <code>Route</code> object representing one state of this Junction.</p>\n<p>Use this method when you need an arbitrary <code>Route</code> object. For example, when you’d like to link to a specific route within your current component, or when you’d like to programatically navigate to a specific route.</p>\n<h4 id="arguments"><a class="header-anchor" href="#arguments" aria-hidden="true">#</a> Arguments</h4>\n<ul>\n<li><code>key</code> (<em>string</em>): The key of the branch which this <code>Route</code> will follow</li>\n<li><code>params</code> <em><small>optional</small></em> (<em>object</em>): An object containing values of the created route’s <code>params</code></li>\n<li><code>...next</code> <em><small>optional</small></em> (<em><a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a>]</em>): <code>Route</code> objects representing the state of the branch’s <code>next</code> junctions</li>\n</ul>\n<p><em>If you’re familiar with <a href="https://facebook.github.io/react/docs/react-api.html#createelement">React.createElement()</a>, note that <code>createRoute()</code> uses exactly the same format. Theoretically, you could even create routes with JSX.</em></p>\n<h4 id="returns"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4>\n<p>(<em><a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a></em>)</p>\n<h4 id="example"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4>\n<p>This example puts together all of the different forms of Junction, to create a single route linking deep into an application.</p>\n<p>Note that this is rather contrived. A more realistic example would have these junctions defined over multiple files, with routes mostly being created only a single level deep.</p>\n<pre><code class="language-jsx"><span class="token keyword" >const</span> invoiceMainJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Details<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Payments<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> invoiceModalJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  AddPayment<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> invoicesJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Add<span class="token punctuation" >:</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Invoice<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    path<span class="token punctuation" >:</span> <span class="token string" >\'/:id\'</span><span class="token punctuation" >,</span>\n    paramTypes<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      id<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> required<span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    next<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n      main<span class="token punctuation" >:</span> invoiceMainJunction<span class="token punctuation" >,</span>\n      modal<span class="token punctuation" >:</span> invoiceModalJunction<span class="token punctuation" >,</span>\n    <span class="token punctuation" >}</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> appJunction <span class="token operator" >=</span> <span class="token function" >createJunction</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>\n  Dashboard<span class="token punctuation" >:</span> <span class="token punctuation" >{</span> <span class="token keyword" >default</span><span class="token punctuation" >:</span> <span class="token boolean" >true</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n  Invoices<span class="token punctuation" >:</span> <span class="token punctuation" >{</span>\n    next<span class="token punctuation" >:</span> invoicesJunction<span class="token punctuation" >,</span>\n  <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n<span class="token punctuation" >}</span><span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> converter <span class="token operator" >=</span> <span class="token function" >createConverter</span><span class="token punctuation" >(</span>appJunction<span class="token punctuation" >)</span>\n\n<span class="token keyword" >const</span> route <span class="token operator" >=</span>\n  appJunction<span class="token punctuation" >.</span><span class="token function" >createRoute</span><span class="token punctuation" >(</span><span class="token string" >\'Invoices\'</span><span class="token punctuation" >,</span> <span class="token punctuation" >{</span><span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n    invoicesJunction<span class="token punctuation" >.</span><span class="token function" >createRoute</span><span class="token punctuation" >(</span><span class="token string" >\'Invoice\'</span><span class="token punctuation" >,</span> <span class="token punctuation" >{</span> id<span class="token punctuation" >:</span> <span class="token string" >\'123\'</span> <span class="token punctuation" >}</span><span class="token punctuation" >,</span>\n      invoiceMainJunction<span class="token punctuation" >.</span><span class="token function" >createRoute</span><span class="token punctuation" >(</span><span class="token string" >\'Details\'</span><span class="token punctuation" >)</span><span class="token punctuation" >,</span>\n      invoiceModalJunction<span class="token punctuation" >.</span><span class="token function" >createRoute</span><span class="token punctuation" >(</span><span class="token string" >\'AddPayment\'</span><span class="token punctuation" >)</span>\n    <span class="token punctuation" >)</span>\n  <span class="token punctuation" >)</span>\n\nhistory<span class="token punctuation" >.</span><span class="token function" >push</span><span class="token punctuation" >(</span>converter<span class="token punctuation" >.</span><span class="token function" >locate</span><span class="token punctuation" >(</span>route<span class="token punctuation" >)</span><span class="token punctuation" >)</span>\n</code></pre>\n')}});