webpackJsonp([16],{119:function(n,a,s){n.exports=s(1).markdownPostProcessor('<p>Converts the <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Location.md%%%END_SITEPACK_LINK%%%">Location</a> objects emitted by the supplied <a href="https://github.com/mjackson/history#properties">History</a> into <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Route.md%%%END_SITEPACK_LINK%%%">Route</a> objects, and passes these to the supplied renderer.</p>\n<p>The renderer is defined by the <code>render</code> prop, which should take one of these forms:</p>\n<ul>\n<li>A function which takes a <code>{ route, locate }</code> object and returns a React Element</li>\n<li>A Component which accepts a <code>route</code> and <code>locate</code> props</li>\n<li>A React Element which will have <code>route</code> and <code>locate</code> props added via <a href="https://facebook.github.io/react/docs/react-api.html#cloneelement">React.cloneElement</a></li>\n</ul>\n<p>This component works be internally creating and wrapping a <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Converter.md%%%END_SITEPACK_LINK%%%">Converter</a> object, and passing any received <code>Location</code> objects to its <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Converter.md#routelocation%%%END_SITEPACK_LINK%%%">converter.route()</a> method. The optional <code>baseLocation</code> prop behaves the same as the <code>baseLocation</code> argument on <a href="%%%SITEPACK_LINK%%%/docs/api/junctions/createConverter.md%%%END_SITEPACK_LINK%%%">createConverter</a>.</p>\n<p>Use this component to reduce boilerplate. If you find you need more control, you can always revert to managing your own <code>Converter</code> instance later on.</p>\n<h4 id="props"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h4>\n<ul>\n<li><code>history</code> (<em>History</em>): A history object</li>\n<li><code>junction</code> (<em><a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Junction.md%%%END_SITEPACK_LINK%%%">Junction</a></em>): A map of possible routes</li>\n<li><code>render</code> (<em>function | Component | ReactElement</em>): A handler to render your current route</li>\n<li><code>baseLocation</code> <em><small>optional</small></em> (<em><a href="%%%SITEPACK_LINK%%%/docs/api/junctions/Location.md%%%END_SITEPACK_LINK%%%">Location</a></em>): The parts of your URLs which must exist, but are ignored for routing purposes</li>\n</ul>\n<h4 id="child-context"><a class="header-anchor" href="#child-context" aria-hidden="true">#</a> Child Context</h4>\n<ul>\n<li><code>history</code> (<em>History</em>): A history object</li>\n</ul>\n<p>This component’s context is managed by an internal <a href="%%%SITEPACK_LINK%%%/docs/api/react-junctions/HistoryContext.md%%%END_SITEPACK_LINK%%%">&lt;HistoryContext&gt;</a> element.</p>\n<h4 id="example"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4>\n<p>Most of this website’s live examples use a <code>&lt;Router&gt;</code> component to handle routing.</p>\n<p>In particular, the <a href="%%%SITEPACK_LINK%%%/examples/BaseLocation.example.js%%%END_SITEPACK_LINK%%%">Base Location</a> example includes a <code>&lt;Router&gt;</code> with <code>baseLocation</code>. View this page to see the <code>AppScreen</code> component which is used below.</p>\n<pre><code class="language-js"><span class="token comment" spellcheck="true">// By providing a `baseLocation` prop with the \'/mountpoint\' pathname, we</span>\n<span class="token comment" spellcheck="true">// indicate that *all* URLs must start with `/mountpoint\', and thus it</span>\n<span class="token comment" spellcheck="true">// should be ignored for routing purposes.</span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Router</span>\n  <span class="token attr-name" >baseLocation</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token punctuation" >{</span>pathname<span class="token punctuation" >:</span> <span class="token string" >\'/mountpoint\'</span><span class="token punctuation" >}</span><span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >history</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>history<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >junction</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>AppScreen<span class="token punctuation" >.</span>junction<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >render</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> route<span class="token punctuation" >,</span> locate <span class="token punctuation" >}</span><span class="token punctuation" >)</span> <span class="token operator" >=</span><span class="token operator" >></span> <span class="token operator" >&lt;</span>AppScreen route<span class="token punctuation" >=</span><span class="token punctuation" >{</span>rouute<span class="token punctuation" >}</span> locate<span class="token punctuation" >=</span><span class="token punctuation" >{</span>locate<span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >}</span>\n<span class="token operator" >/</span><span class="token operator" >></span>\n\n<span class="token comment" spellcheck="true">// If your handler component takes `route` and `locate` props, you can</span>\n<span class="token comment" spellcheck="true">// pass it to the `render` prop directly</span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Router</span>\n  <span class="token attr-name" >history</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>history<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >junction</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>AppScreen<span class="token punctuation" >.</span>junction<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >render</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>AppScreen<span class="token punctuation" >}</span></span>\n<span class="token punctuation" >/></span></span>\n\n<span class="token comment" spellcheck="true">// If you\'d like to pass extra props to your component, you can pass a</span>\n<span class="token comment" spellcheck="true">// React Element to `render`</span>\n<span class="token tag" ><span class="token tag" ><span class="token punctuation" >&lt;</span>Router</span>\n  <span class="token attr-name" >history</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>history<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >junction</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span>AppScreen<span class="token punctuation" >.</span>junction<span class="token punctuation" >}</span></span>\n  <span class="token attr-name" >render</span><span class="token script language-javascript" ><span class="token punctuation" >=</span><span class="token punctuation" >{</span><span class="token operator" >&lt;</span>AppScreen user<span class="token punctuation" >=</span><span class="token punctuation" >{</span>currentUser<span class="token punctuation" >}</span></span> <span class="token punctuation" >/></span></span><span class="token punctuation" >}</span>\n<span class="token operator" >/</span><span class="token operator" >></span>\n</code></pre>\n')}});