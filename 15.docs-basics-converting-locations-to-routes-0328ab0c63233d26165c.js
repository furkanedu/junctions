webpackJsonp([15],{120:function(e,n,o){e.exports=o(1).markdownPostProcessor('<p><strong>Note: The Guide is still only an outline. <a href="%%%SITEPACK_LINK%%%/docs/basics/github.com/jamesknelson/junctions%%%END_SITEPACK_LINK%%%">Pull Requests</a> would be greatly appreciated!</strong></p>\n<ul>\n<li>\n<p>Junctions is – at its core – a package for converting between ‘Location’ and ‘Route’ objects. So how do you actually accomplish this?</p>\n</li>\n<li>\n<p>Once the pieces are in place, the process is actually incredibly simple. Assuming you have a root <code>Junction</code>, all you need to do is create a <code>Converter</code> object and do a conversion:</p>\n</li>\n</ul>\n<pre><code class="language-js"><span class="token keyword" >const</span> converter <span class="token operator" >=</span> <span class="token function" >createConverter</span><span class="token punctuation" >(</span>rootJunction<span class="token punctuation" >)</span>\n<span class="token keyword" >const</span> rootRoute <span class="token operator" >=</span> converter<span class="token punctuation" >.</span><span class="token function" >route</span><span class="token punctuation" >(</span>location<span class="token punctuation" >)</span>\n</code></pre>\n<ul>\n<li>In fact, we <em>could</em> make this even simpler by creating a <code>getRoute</code> function which accepts both the location and Junction.</li>\n<li>The only reason we split them into two is performance</li>\n<li>Any conversion needs to do some up-front work on the supplied Junction object. Creating a persistent <code>Converter</code> object lets Junctions save the result of this work for later, improving performance.</li>\n<li>But what about a real application?</li>\n<li>Usage in an actual application is – surprisingly – almost identical. But there are a few differences you may encounter</li>\n</ul>\n<h2 id="base-locations"><a class="header-anchor" href="#base-locations" aria-hidden="true">#</a> Base Locations</h2>\n<ul>\n<li>If your application doesn’t know where it is mounted, it might not work</li>\n<li>Junctions assumes that the entire Location, right from the start, needs to be converted into routes.\n<strong>TODO: example</strong></li>\n<li>So if your Location has some irrelevant information, it needs to be stripped.</li>\n<li>You can tell the Converter to do so by supplying a base Location\n<strong>TODO: example</strong></li>\n</ul>\n<h2 id="canonical-locations"><a class="header-anchor" href="#canonical-locations" aria-hidden="true">#</a> Canonical Locations</h2>\n<ul>\n<li>If any of your applications junctions specify default parameters, then the converter will add these where necessary.</li>\n<li>This means that the Route which the converter returns may differ from the Location which you passed to it\n<strong>TODO: example</strong></li>\n<li>This may not be a problem for you. But if it is, you can also use the converter to generate a <em>new</em>, <em>canonical</em> location for your route\n<strong>TODO: example</strong></li>\n<li>If your original location didn’t specify some parameters with defaults, your new one will. By navigating to it, you can ensure that the user only ever sees one URL for a given route.</li>\n</ul>\n<h2 id="example-use-with-history"><a class="header-anchor" href="#example-use-with-history" aria-hidden="true">#</a> Example: Use with History</h2>\n<ul>\n<li>Here’s an example which uses the history package, along with everything we’ve learned so far, to output the current root route to the screen and navigate to the canonical location</li>\n</ul>\n<p><strong>TODO: example</strong></p>\n')}});