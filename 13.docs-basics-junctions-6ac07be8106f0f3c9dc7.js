webpackJsonp([13],{122:function(e,n,t){e.exports=t(1).markdownPostProcessor('<p><strong>Note: The Guide is still only an outline. <a href="%%%SITEPACK_LINK%%%/docs/basics/github.com/jamesknelson/junctions%%%END_SITEPACK_LINK%%%">Pull Requests</a> would be greatly appreciated!</strong></p>\n<ul>\n<li>\n<p>So far, we’ve discussed the two types of objects which <em>hold</em> our state - Locations and Routes.</p>\n</li>\n<li>\n<p>But <code>Junction</code> objects are a little different. Instead of holding navigation state itself, they <strong>describe the set of possible values</strong> which the application’s navigation state can take – allowing Junctions to automatically convert between Location and Route objects.</p>\n</li>\n<li>\n<p>Junction objects are found wherever Routes are consumed. In practice, this means that your Screen Components have junctions associated with them.</p>\n</li>\n<li>\n<p>For example, a screen which can render one of these two routes would declare this by setting a static <code>junction</code> property like so</p>\n</li>\n<li>\n<p>each of these possibilities is called a <strong>branch</strong></p>\n</li>\n<li>\n<p>branches can specify information</p>\n</li>\n<li>\n<p>for example, you can specify arbitrary data associated with a branch. This data will be passed through to a route on its <strong>data</strong> property</p>\n</li>\n<li>\n<p>and where routes can have parameters, junctions declare the types of parameters (see API ref for details)</p>\n</li>\n<li>\n<p>but junctions aren’t just a way of specifying route types. they’re a way to specify navigation state types.</p>\n</li>\n<li>\n<p>junctions specify possible URLs too. and this can be used to map between Locations and Routes</p>\n</li>\n<li>\n<p>junctions are nested, like routes</p>\n</li>\n<li>\n<p>unlike routes, junctions are aren’t onions</p>\n</li>\n<li>\n<p>each junction can have multiple children</p>\n</li>\n<li>\n<p>junctions are trees. In fact, they’re decision trees.</p>\n</li>\n</ul>\n<p><strong>TODO: decision tree image</strong></p>\n<h2 id="junctions-are-decision-trees"><a class="header-anchor" href="#junctions-are-decision-trees" aria-hidden="true">#</a> Junctions are decision trees</h2>\n<ul>\n<li>this section started by stating that junction objects describe your navigation state.</li>\n<li>but the key to understanding Junction objects is to understanding <em>why</em> Junctions are described in the format they are.</li>\n<li>Your Root Junction object describes all possible values of your application’s Location or Root Route, in the form of a decision tree which lets you convert between both forms - Location and Route</li>\n<li>to see this, consider the following URL. How do you split it into routes?</li>\n</ul>\n<pre><code>`/invoices/add`\n</code></pre>\n<ul>\n<li>but given the following decision tree, the conversion becomes obvious</li>\n</ul>\n<p><strong>TODO: decision tree image</strong></p>\n<ul>\n<li>You can think of your application’s root Junction object as a Map which let’s this package’s tooling automatically find a Route to a given Location.</li>\n<li>As you see, Junctions are really the core of this package. And to forgo all decorum and state the obvious, that is why the package is called Junctions.</li>\n</ul>\n')}});