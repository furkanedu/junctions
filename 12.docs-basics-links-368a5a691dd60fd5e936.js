webpackJsonp([12],{123:function(e,n,o){e.exports=o(1).markdownPostProcessor('<p><strong>Note: The Guide is still only an outline. <a href="%%%SITEPACK_LINK%%%/docs/basics/github.com/jamesknelson/junctions%%%END_SITEPACK_LINK%%%">Pull Requests</a> would be greatly appreciated!</strong></p>\n<ul>\n<li>\n<p><em>Junctions</em> aims to make as few assumptions about your environment as possible.</p>\n</li>\n<li>\n<p>In fact, Junctions does not assume you’re using React. It should be perfectly possible to use Junctions with Vue, Angular, or any other component-based framework.</p>\n</li>\n<li>\n<p>One side-effect of this philosophy is that the core junctions package does not include a <code>&lt;Link&gt;</code> component.</p>\n</li>\n<li>\n<p>One solution to this is to roll your own Link.</p>\n</li>\n<li>\n<p>Because link components only need to communicate with your browser – not junctions itself – you can expect that the API will be stable for a very very long time</p>\n</li>\n<li>\n<p>But if you’d prefer to use something which already exists, we provide a separate react-junctions package which contains a <Link> component.</p>\n</li>\n<li>\n<p>This component assumes you’re using the history package for navigation, and uses pushState to update that history with the Location you specify.</p>\n</li>\n</ul>\n<p><strong>TODO: example</strong></p>\n<ul>\n<li>And because passing a history to every link is less than ideal, the package also provides a HistoryContext component to make your history object available to Links throughout the application.</li>\n</ul>\n<p><strong>TODO: example</strong></p>\n<h2 id="but-how-do-i-know-what-location-to-pass"><a class="header-anchor" href="#but-how-do-i-know-what-location-to-pass" aria-hidden="true">#</a> But how do I know what Location to pass?</h2>\n<ul>\n<li>\n<p>You might have noticed in the above examples that the Location we pass is hard-coded.</p>\n</li>\n<li>\n<p>For small applications, this works fine. Even if your routes are <em>technically</em> relative, components with a set location in your application are <em>effectively</em> absolute. If you know where they’re going to be mounted, using hard-coded URLs is simple and effective.</p>\n</li>\n<li>\n<p>But what about for larger applications, where you want your screen components to be <em>truly</em> independent?</p>\n</li>\n<li>\n<p>Or what if you genuinely don’t know where your Screen will be mounted?</p>\n</li>\n<li>\n<p>In this case, you can’t specify a Location for your Link, because <em>you don’t know what it will be</em></p>\n</li>\n<li>\n<p>But this doesn’t change the fact that the <em>browser</em> needs a Location. Even if you can create a Route, the browser won’t understand it.</p>\n</li>\n<li>\n<p>In cases like this, you need a way to convert a relative Route into a Location which you can pass to links. Or in our terminology, we’ll need a way to Locate Routes.</p>\n</li>\n</ul>\n')}});